{
  "version": 3,
  "file": "svelte.css",
  "sources": [
    "../src/components/App.svelte",
    "../src/components/Entrance.svelte",
    "../src/components/Main.svelte",
    "../src/components/Topbar.svelte",
    "../src/components/Overview.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Entrance from './Entrance.svelte';\n\timport Main from './Main.svelte';\n\timport TopBar from './Topbar.svelte';\n\n\tlet page = 'entrance';\n\n\tfunction navigate(newPage) {\n\t\tpage = newPage.detail;\n\t}\n</script>\n\n<style>\n\tmain {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 200px auto;\n\t\tgrid-template-rows: 35px auto;\n\t\theight: 100%;\n\t\tpadding-top: 25px;\n\t}\n</style>\n\n<TopBar />\n\n<main>\n\t{#if page === 'entrance'}\n\t\t<Entrance on:navigate={navigate}/>\n\t{:else if page === 'main'}\n\t\t<Main />\n\t{:else}\n\t\t<div>page not found</div>\n\t{/if}\n</main>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<style>\n  .top-left {\n\t\tbackground-color: black;\n\t\tgrid-column-start: 1;\n\t\tgrid-column-end: 3;\n\t}\n\n\t.bottom-left {\n\t\talign-content: center;\n\t\tgrid-column-start: 1;\n\t\tgrid-column-end: 3;\n\t}\n\n  .content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\ttext-align: center;\n\t\theight: 100%;\n\t}\n\n\t.subtitle { font-size: 2em; margin: 0;}\n\t.title { font-size: 5em; margin: 0;}\n</style>\n\n<div class=\"top-left\"></div>\n<div class=\"bottom-left\">\n  <div class=\"content\">\n    <div class=\"header\">\n      <h1 class=\"title\">-\\amiibox/-</h1>\n      <h3 class=\"subtitle\">accessible AI experimentation for everyone</h3>\n    </div>\n    <div class=\"ui hidden divider\" />\n    <div class=\"ui container\">\n      <button class=\"enter-btn fluid ui black basic button\" on:click={() => dispatch('navigate', 'main')}>Begin</button>\n    </div>\n  </div>\n</div>",
    "<script>\n  import fs from 'fs';\n  import { promisify } from 'util';\n  import { remote } from 'electron';\n  import Overview from './Overview.svelte';\n  import Hex from './Hex.svelte';\n\n  import CardIO from '../util/cardIO';\n  import decrypt from '../util/decrypt';\n  import sign from '../util/checksum';\n  import encrypt from '../util/re_encrypt';\n  import { calcKeyARaw } from '../util/pwd215';\n\n  const readFile = promisify(fs.readFile);\n  const writeFile = promisify(fs.writeFile);\n\n  let modalState = '';\n\n  let params = [];\n  let abilities = [];\n  let data = Buffer.alloc(540);\n  async function load() {\n    abilities = (await readFile(`${__dirname}/amiibo/abilities.txt`, 'utf8')).split('\\n');\n    const splitted = (await readFile(`${__dirname}/amiibo/regions.txt`, 'utf8')).split('\\n');\n\n    params.push({});\n    let lineNum = 0;\n    let description = '';\n    for (const line of splitted) {\n      switch(lineNum) {\n        case 0:\n          let l = line.split(\":\");\n          params[params.length - 1].name = l[0].trim();\n          params[params.length - 1].type = l[1].trim();\n          break;\n        case 1: params[params.length - 1].start = line; break;\n        case 2: params[params.length - 1].end = line; break;\n        case 3: params[params.length - 1].category = line; break;\n        default:\n          if (line.length === 0) {\n            description = description.substring(0, description.length - 1);\n            params[params.length - 1].description = description;\n            description = '';\n            params.push({});\n            lineNum = 0;\n            continue;\n          }\n          else description += line + ' ';\n      }\n      lineNum++;\n    }\n    params.pop();\n  }\n\n  let card;\n  let pw;\n  async function initCard() {\n    card = new CardIO();\n    await card.init();\n  }\n\n  async function loadFile() {\n    let paths = await remote.dialog.showOpenDialog({\n      message: 'open amiibo bin'\n    });\n    data = decrypt(await readFile(paths[0]));\n  }\n\n  async function saveFile() {\n    let paths = await remote.dialog.showSaveDialog({\n      message: 'save amiibo bin'\n    });\n    await writeFile(paths[0], encrypt(data));\n\n  }\n\n  async function readCard() {\n    modalState = 'read';\n    window['$']('.ui.basic.modal').modal({\n      closable: false,\n      onApprove: async () => {\n        data = await card.read();\n        data = decrypt(data);\n      }\n    })\n    .modal('show');\n  }\n\n\n  async function writeCard() {\n    modalState = 'write'\n    window['$']('.ui.basic.modal').modal({\n      closable: false,\n      onApprove: async () => {\n        let targetCard = await card.read();\n        pw = calcKeyARaw(Buffer.from([...targetCard.slice(0, 3), ...targetCard.slice(4, 8)]));\n\n        targetCard = decrypt(targetCard);\n        data.copy(targetCard, 0xE0, 0xE0, 0x1B5);\n\n        sign(targetCard);\n        let encrypted = encrypt(targetCard);\n        await card.writeData(encrypted, pw)\n      }\n    })\n    .modal('show');\n  }\n\n  async function cloneCard() {\n    modalState = 'clone';\n    let paths = await remote.dialog.showOpenDialog({\n      message: 'open amiibo bin'\n    })\n\n    window['$']('.ui.basic.modal').modal({\n      closable: false,\n      onApprove: async () => {\n        let source = await readFile(paths[0]);\n        let dest = await card.read();\n        pw = calcKeyARaw(Buffer.from([...dest.slice(0, 3), ...dest.slice(4, 8)]));\n\n        let dec = decrypt(Buffer.from([...source]));\n\n        Buffer.from([...dest.slice(0, 8)]).copy(dec, 0x1D4);\n        Buffer.from(pw.match(/.{2}/g).map(v => parseInt(v, 16))).copy(dec, 0x214);\n        Buffer.from([0x80, 0x80]).copy(dec, 0x218);\n        Buffer.from([0x00, 0x00, 0x00]).copy(dec, 0x208);\n        Buffer.from([...dest.slice(8, 10)]).copy(dec, 0x00);\n        Buffer.from([0x00, 0x00]).copy(dec, 0x02);\n\n        let enc = encrypt(dec);\n\n        enc[10] = 0x0F;\n        enc[11] = 0xE0;\n        enc[0x208] = 0x01;\n        enc[0x20A] = 0x0F;\n        // console.log([...enc.slice(0)].map(v => `0x${v.toString(16).padStart(2, '0')}`).join(', '));\n        await card.writeFull(enc.slice(0));\n      }\n    })\n    .modal('show');\n  }\n\n  load();\n  initCard();\n\n  let page = 'overview';\n</script>\n\n<style>\n  .top-left { background-color: black; }\n  .top-right { background-color: black; }\n  .bottom-left {\n    border-right: 1px solid black;\n  }\n  .bottom-right {\n    overflow: scroll;\n  }\n\n  .io {\n    background-color: lightgrey;\n  }\n</style>\n\n<div class=\"ui basic modal\">\n  <div class=\"ui icon header\">\n    <i class=\"microchip icon\"></i>\n    Place {modalState === 'clone' ? 'BLANK' : ''} card on reader\n  </div>\n  <div class=\"actions\">\n    <div class=\"ui red basic cancel inverted button\">\n      <i class=\"remove icon\"></i>\n      cancel\n    </div>\n    <div class=\"ui green ok inverted button\">\n      <i class=\"checkmark icon\"></i>\n      Ok\n    </div>\n  </div>\n</div>\n\n<div class=\"top-left\"></div>\n<div class=\"top-right\"></div>\n<div class=\"bottom-left\">\n  <div class=\"ui placeholder\">\n    <div class=\"square image\"></div>\n  </div>\n  <div class=\"io\">\n    <div class=\"ui two mini buttons\">\n      <button class=\"ui labeled icon button\" on:click={() => loadFile()}>\n        <i class=\"icon folder open\"></i>\n        Load\n      </button>\n      <button class=\"ui labeled icon button\" on:click={() => saveFile()}>\n        <i class=\"icon save\"></i>\n        Save\n      </button>\n    </div>\n    <div class=\"ui two mini buttons\">\n      <button class=\"ui labeled icon button\" on:click={() => readCard()}>\n        <i class=\"icon download\"></i>\n        Scan\n      </button>\n      <button class=\"ui labeled icon button\" on:click={() => writeCard()}>\n        <i class=\"icon upload\"></i>\n        Apply\n      </button>\n    </div>\n    <button class=\"ui labeled icon mini fluid button\" on:click={() => cloneCard()}>\n      <i class=\"icon plus\"></i>\n      Clone\n    </button>\n  </div>\n\n  <div class=\"ui middle aligned selection list\">\n    <div class=\"item\" on:click={() => page=\"overview\"}>\n      <div class=\"header content\">\n        Overview\n      </div>\n    </div>\n    <div class=\"item\" on:click={() => page=\"hex\"}>\n      <div class=\"header content\">\n        Hex\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"bottom-right\">\n  {#if page === 'overview'}\n    <Overview {data} {params} {abilities} on:load={setTimeout(() => window['$']('.ui.dropdown').dropdown(), 100)}/>\n  {:else if page === 'hex'}\n    <Hex on:dataChanged={(evt) => data = Buffer.from(evt.detail)} {data} {params}></Hex>\n  {/if}\n</div>",
    "<style>\n  .topbar {\n\t\tdisplay: flex;\n\t\tposition: fixed;\n\t\twidth: 100%;\n\t\theight: 25px;\n\t\tbackground-color: black;\n\t\ttext-align: right;\n\t}\n\n\t.topbar p {\n\t\tcolor: grey;\n\t\tfont-style: italic;\n\t\tmargin: auto;\n\t\tright: 3px;\n\t\tposition: absolute;\n\t}\n</style>\n\n<div class=\"topbar\">\n\t<p>by fudgepop01</p>\n</div>",
    "<script>\n  import { afterUpdate } from 'svelte';\n\n  export let params;\n  export let abilities;\n  export let data;\n\n  afterUpdate(() => {\n    for (const [i, param] of params.entries()) {\n      params[i].value = ({\n        u8(p) { return data.readUInt8(p) },\n        i8(p) { return data.readInt8(p) },\n        u16(p) { return data.readUInt16LE(p) },\n        i16(p) { return data.readInt16LE(p) },\n        u32(p) { return data.readUInt32LE(p) },\n        i32(p) { return data.readInt32LE(p) },\n        HEX(p) { return 'see hex view...' },\n        ABILITY(p) { return this.u8(p) }\n      })[param.type](parseInt(param.start))\n    }\n  })\n\n  function writeAdjustment(v, p) {\n    p.value = parseInt(v);\n    ({\n      u8(v, p) { return data.writeUInt8(v, p) },\n      i8(v, p) { return data.writeInt8(v, p) },\n      u16(v, p) { return data.writeUInt16LE(v, p) },\n      i16(v, p) { return data.writeInt16LE(v, p) },\n      u32(v, p) { return data.writeUInt32LE(v, p) },\n      i32(v, p) { return data.writeInt32LE(v, p) },\n      HEX() { return 'see hex view...' },\n      ABILITY(v, p) { return this.u8(v, p) }\n    })[p.type](p.value, parseInt(p.start))\n  }\n</script>\n\n<style>\n  .text {\n    font-weight: 400;\n  }\n\n  .dropdown .text {\n    padding-left: 20px;\n  }\n\n  .dropdown.icon {\n    position: absolute;\n    right: 0;\n    margin: auto;\n  }\n</style>\n\n<h1 class=\"header\">\n  Overview\n</h1>\n<div class=\"ui middle aligned selection list\">\n  {#each params as param}\n    <div class=\"item\">\n      <div class=\"content\">\n        <div class=\"header\">\n        {param.name}:\n        {#if param.type === 'ABILITY'}\n          <div class=\"ui scrolling dropdown\">\n            <input type=\"hidden\"\n            on:change={(evt) => {writeAdjustment(abilities.map(v => v.toLowerCase()).indexOf(evt.target.value), param)}}\n            value={abilities[param.value]}\n            name=\"{`ability${params.indexOf(param)}`}\">\n            <div class=\"default text\">None</div>\n            <i class=\"dropdown icon\"></i>\n            <div class=\"menu\">\n              {#each abilities as ability}\n                <div class=\"item\">{ability}</div>\n              {/each}\n            </div>\n          </div>\n        {:else if param.type === 'HEX'}\n          (edit as hex)\n        {:else}\n          <div class=\"ui transparent input\">\n            <input type=\"number\" value={param.value} on:change={(evt) => writeAdjustment(evt.target.value, param)} placeholder=\"value...\"/>\n          </div>\n        {/if}\n        </div>\n        <div class=\"description\">{param.description}</div>\n      </div>\n    </div>\n  {/each}\n</div>"
  ],
  "names": [],
  "mappings": "AAaC,IAAI,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,KAAK,CAAC,IAAI,CACjC,kBAAkB,CAAE,IAAI,CAAC,IAAI,CAC7B,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,AAClB,CAAC;ACZA,SAAS,cAAC,CAAC,AACX,gBAAgB,CAAE,KAAK,CACvB,iBAAiB,CAAE,CAAC,CACpB,eAAe,CAAE,CAAC,AACnB,CAAC,AAED,YAAY,cAAC,CAAC,AACb,aAAa,CAAE,MAAM,CACrB,iBAAiB,CAAE,CAAC,CACpB,eAAe,CAAE,CAAC,AACnB,CAAC,AAEA,QAAQ,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,IAAI,AACb,CAAC,AAED,SAAS,cAAC,CAAC,AAAC,SAAS,CAAE,GAAG,CAAE,MAAM,CAAE,CAAC,AAAC,CAAC,AACvC,MAAM,cAAC,CAAC,AAAC,SAAS,CAAE,GAAG,CAAE,MAAM,CAAE,CAAC,AAAC,CAAC;ACyHnC,SAAS,cAAC,CAAC,AAAC,gBAAgB,CAAE,KAAK,AAAE,CAAC,AACtC,UAAU,cAAC,CAAC,AAAC,gBAAgB,CAAE,KAAK,AAAE,CAAC,AACvC,YAAY,cAAC,CAAC,AACZ,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAC/B,CAAC,AACD,aAAa,cAAC,CAAC,AACb,QAAQ,CAAE,MAAM,AAClB,CAAC,AAED,GAAG,cAAC,CAAC,AACH,gBAAgB,CAAE,SAAS,AAC7B,CAAC;AChKD,OAAO,cAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,KAAK,CACvB,UAAU,CAAE,KAAK,AAClB,CAAC,AAED,qBAAO,CAAC,CAAC,cAAC,CAAC,AACV,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,GAAG,CACV,QAAQ,CAAE,QAAQ,AACnB,CAAC;ACsBA,KAAK,eAAC,CAAC,AACL,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,wBAAS,CAAC,KAAK,eAAC,CAAC,AACf,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,SAAS,KAAK,eAAC,CAAC,AACd,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,IAAI,AACd,CAAC"
}