import { h } from '../fudgeapps.core.js';

class Tooltip {
    constructor() {
        this.active = false;
    }
    render() {
        if (!this.active)
            return;
        const out = [];
        if (this.data) {
            let data = (typeof this.data === 'string') ? JSON.parse(this.data) : this.data;
            if (data.name)
                out.push(h("span", null, `name: ${data.name}`), h("br", null));
            out.push(h("span", null, `size: ${data.end - data.start} [0x${data.start.toString(16)} - 0x${data.end.toString(16)}]`), h("br", null));
            for (const [key, value] of Object.entries(data)) {
                if (['name', 'subRegions', 'start', 'end'].includes(key))
                    continue;
                if (value !== null) {
                    out.push(h("span", null,
                        key,
                        ": ",
                        value), h("br", null));
                }
            }
        }
        else if (this.simpleText) {
            out.push(h("span", null, this.simpleText));
        }
        else {
            out.push(h("span", null, "placeholder"));
        }
        return out;
    }
    static get is() { return "fudge-hex-tooltip"; }
    static get properties() { return {
        "active": {
            "type": Boolean,
            "attr": "active"
        },
        "data": {
            "type": String,
            "attr": "complex"
        },
        "simpleText": {
            "type": String,
            "attr": "simple"
        }
    }; }
    static get style() { return "fudge-hex-tooltip{position:fixed;display:none;-webkit-box-sizing:border-box;box-sizing:border-box;font-size:14px;max-width:400px;padding:5px;border-radius:2px;background-color:#000;color:#fff;z-index:1000;pointer-events:none}fudge-hex-tooltip[active=true]{display:block;left:calc(var(--mouse-x) * 1px);top:calc(var(--mouse-y) * 1px);-webkit-transition:left .2s ease,top .2s ease;transition:left .2s ease,top .2s ease}"; }
}

export { Tooltip as FudgeHexTooltip };
